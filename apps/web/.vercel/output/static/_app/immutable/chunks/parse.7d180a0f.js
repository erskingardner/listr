const y=-1,b=-2,h=-3,w=-4,g=-5,p=-6;function A(c,I){return i(JSON.parse(c),I)}function i(c,I){if(typeof c=="number")return o(c,!0);if(!Array.isArray(c)||c.length===0)throw new Error("Invalid input");const u=c,r=Array(u.length);function o(n,E=!1){if(n===-1)return;if(n===-3)return NaN;if(n===-4)return 1/0;if(n===-5)return-1/0;if(n===-6)return-0;if(E)throw new Error("Invalid input");if(n in r)return r[n];const t=u[n];if(!t||typeof t!="object")r[n]=t;else if(Array.isArray(t))if(typeof t[0]=="string"){const s=t[0],a=I==null?void 0:I[s];if(a)return r[n]=a(o(t[1]));switch(s){case"Date":r[n]=new Date(t[1]);break;case"Set":const f=new Set;r[n]=f;for(let e=1;e<t.length;e+=1)f.add(o(t[e]));break;case"Map":const l=new Map;r[n]=l;for(let e=1;e<t.length;e+=2)l.set(o(t[e]),o(t[e+1]));break;case"RegExp":r[n]=new RegExp(t[1],t[2]);break;case"Object":r[n]=Object(t[1]);break;case"BigInt":r[n]=BigInt(t[1]);break;case"null":const N=Object.create(null);r[n]=N;for(let e=1;e<t.length;e+=2)N[t[e]]=o(t[e+1]);break;default:throw new Error(`Unknown type ${s}`)}}else{const s=new Array(t.length);r[n]=s;for(let a=0;a<t.length;a+=1){const f=t[a];f!==-2&&(s[a]=o(f))}}else{const s={};r[n]=s;for(const a in t){const f=t[a];s[a]=o(f)}}return r[n]}return o(0)}export{b as H,h as N,w as P,y as U,g as a,p as b,A as p,i as u};
